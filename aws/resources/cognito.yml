# Creates a role that allows Cognito to send SNS messages
SNSRole:
  Type: "AWS::IAM::Role"
  Properties:
    RoleName: ${self:custom.role.cognito.sns.name}
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "cognito-idp.amazonaws.com"
          Action:
            - "sts:AssumeRole"
    Policies:
      - PolicyName: ${self:custom.role.cognito.sns.name}-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: "sns:publish"
              Resource: "*"

# Creates a user pool in cognito for your app to auth against
# This example requires MFA and validates the phone number to use as MFA
# Other fields can be added to the schema
UserPool:
  Type: "AWS::Cognito::UserPool"
  Properties:
    UserPoolName: ${self:custom.userPoolName}
    AutoVerifiedAttributes:
      - phone_number
    MfaConfiguration: "ON"
    DeviceConfiguration:
      ChallengeRequiredOnNewDevice: true
      DeviceOnlyRememberedOnUserPrompt: false
    UsernameAttributes:
      - phone_number
    SmsVerificationMessage: "Welcome to my-app, {####}"
    UserPoolTags:
      application: "my-app"
    SmsConfiguration:
      ExternalId: ${self:custom.base}-external
      SnsCallerArn:
        Fn::GetAtt:
          - SNSRole
          - Arn
    Schema:
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: false
      - Name: nickname
        AttributeDataType: String
        Mutable: true
        Required: false

# Creates a User Pool Client to be used by the identity pool
UserPoolClient:
  Type: "AWS::Cognito::UserPoolClient"
  Properties:
    ClientName: ${self:custom.base}-client
    GenerateSecret: false
    UserPoolId:
      Ref: UserPool

# Creates a federeated Identity pool
IdentityPool:
  Type: "AWS::Cognito::IdentityPool"
  Properties:
    IdentityPoolName: myapp${self:provider.stage}Identity
    AllowUnauthenticatedIdentities: true
    CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
            - UserPool
            - ProviderName

# Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
CognitoUnAuthorizedRole:
  Type: "AWS::IAM::Role"
  Properties:
    RoleName: ${self:custom.role.cognito.unAuth.name}
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Federated: "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
          Condition:
            StringEquals:
              "cognito-identity.amazonaws.com:aud":
                Ref: IdentityPool
    Policies:
      - PolicyName: ${self:custom.role.cognito.unAuth.name}-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "mobileanalytics:PutEvents"
                - "cognito-sync:*"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - appsync:GraphQL
               # TODO: replace apis/*/* with apis/<graphql_id/* 
              Resource:
                - arn:aws:appsync:${self:provider.stage}:${self:custom.account.id}:apis/*/*

# Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
# Only allows users in the previously created Identity Pool
CognitoAuthorizedRole:
  Type: "AWS::IAM::Role"
  Properties:
    RoleName: ${self:custom.role.cognito.auth.name}
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Federated: "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
          Condition:
            StringEquals:
              "cognito-identity.amazonaws.com:aud":
                Ref: IdentityPool
    Policies:
      - PolicyName: ${self:custom.role.cognito.auth.name}-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "mobileanalytics:PutEvents"
                - "cognito-sync:*"
                - "cognito-identity:*"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - appsync:GraphQL
              # TODO: replace apis/*/* with apis/<graphql_id/*
              Resource:
                - arn:aws:appsync:${self:provider.stage}:${self:custom.account.id}:apis/*/*

# Assigns the roles to the Identity Pool
IdentityPoolRoleMapping:
  Type: "AWS::Cognito::IdentityPoolRoleAttachment"
  Properties:
    IdentityPoolId:
      Ref: IdentityPool
    Roles:
      authenticated:
        Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
      unauthenticated:
        Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
